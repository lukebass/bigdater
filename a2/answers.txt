1) If we wanted the WikipediaPopular class to return the most popular page, as well as the view count, we would have to modify both our mapper 
and reducer classes. First, the mapper would need to return Text-LongTextPairWritable pairs. This would, therefore, require us to implement a 
LongTextPairWritable class, which implements Writable. This class would allow us to store the view count (Long) and page (Text) pairs, which
we would return, along with the key (Text time field), from the mapper. Next, the reducer would need to accept Text-LongTextPairWritable pairs. 
However we are currently calculating the max view count would also slightly change. We would no longer iterate over a list of LongWritables, to 
determine the max view count, but rather our LongTextWritable pairs. Lastly, the reducer would need to return Text-LongTextPairWritable pairs.

2) The difference between map and flatMap is that the map operation will apply itself to the n elements passed in and will return n elements as 
a result. The flatMap operation will apply itself to the n elements passed in, however, for each element, it may return 0, 1, or more elements
as a result. Take, for example, wordcount-improved. For each line flatMap processes, it may return 0, 1, or more words, depending on how many 
words were on the line. The MapReduce concept of mapping can exhibit behaviour similar to both map and flatMap. Again, the mapper in 
WordCountImproved.java took in a line of text and output 0, 1, or more words, depending on how many words were on the line. However, in 
WikipediaPopular.java, the mapper took in a line of text and output exactly one element in return. 

3) The difference between reduce and reduceByKey is that the reduce operation will apply itself to the n elements passed in and will return one 
value as a result. The reduceByKey operation will apply itself to the n key-value pairs passed in and will return one value for each unique key 
as a result. ReduceByKey is more like the MapReduce concept of reducing: only unique keys and their values remain after the input is reduced.

4) If we wanted wikipedia_popular.py to return all pages viewed the highest number of times, we would, first, have to implement a function used 
by the reduceByKey call. Instead of returning a views-name tuple, it would instead return a list of tuples for each time key, where the list 
contained the highest viewed pages. For each key, we would iterate over the views-name tuples and if the current tuple had views greater than 
the tuples in our accumulator list, we would empty the list and add this page to it. However, if the current page had views equal to the tuples 
our accumulator list, we would instead add it to the list. Furthermore, we would have to update the outputFormat function to return the time, 
followed by the list of tuples, instead of the time-tuple format it currently outputs. 